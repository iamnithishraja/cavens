import React from 'react';
import { View, Text, StyleSheet } from 'react-native';
import { Colors } from '@/constants/Colors';
import BarChart from './BarChart';
import { TicketTypeAnalysis } from '@/types/analytics';

interface RevenueBreakdownProps {
  ticketTypes: TicketTypeAnalysis[];
}

const RevenueBreakdown: React.FC<RevenueBreakdownProps> = ({ ticketTypes }) => {
  const formatCurrency = (amount: number) => {
    if (amount >= 1000) {
      return `AED ${(amount / 1000).toFixed(1)}k`;
    }
    return `AED ${amount}`;
  };

  // Create data for revenue breakdown chart
  const revenueBreakdownData = ticketTypes.reduce((acc, ticket) => {
    acc[ticket.name] = ticket.revenue;
    return acc;
  }, {} as Record<string, number>);

  if (ticketTypes.length === 0) {
    return (
      <View style={styles.container}>
        <Text style={styles.sectionTitle}>Revenue Breakdown</Text>
        <View style={styles.emptyState}>
          <Text style={styles.emptyText}>No ticket sales data available</Text>
        </View>
      </View>
    );
  }

  // If only one ticket type, show a different visualization
  if (ticketTypes.length === 1) {
    const singleTicket = ticketTypes[0];
    return (
      <View style={styles.container}>
        <Text style={styles.sectionTitle}>Revenue Breakdown</Text>
        <Text style={styles.subtitle}>Single ticket type performance</Text>
        
        <View style={styles.singleTicketCard}>
          <View style={styles.singleTicketHeader}>
            <View style={styles.singleTicketIcon}>
              <Text style={styles.singleTicketEmoji}>ðŸŽ«</Text>
            </View>
            <View style={styles.singleTicketInfo}>
              <Text style={styles.singleTicketName}>{singleTicket.name}</Text>
              <Text style={styles.singleTicketPrice}>{formatCurrency(singleTicket.price)} each</Text>
            </View>
          </View>
          
          <View style={styles.singleTicketStats}>
            <View style={styles.singleTicketStat}>
              <Text style={styles.singleTicketStatValue}>{singleTicket.quantitySold}</Text>
              <Text style={styles.singleTicketStatLabel}>Tickets Sold</Text>
            </View>
            <View style={styles.singleTicketStat}>
              <Text style={styles.singleTicketStatValue}>{formatCurrency(singleTicket.revenue)}</Text>
              <Text style={styles.singleTicketStatLabel}>Total Revenue</Text>
            </View>
          </View>
          
          <View style={styles.singleTicketProgress}>
            <View style={styles.singleTicketProgressBar}>
              <View style={[styles.singleTicketProgressFill, { width: '100%' }]} />
            </View>
            <Text style={styles.singleTicketProgressText}>100% of total revenue</Text>
          </View>
        </View>
      </View>
    );
  }

  return (
    <View style={styles.container}>
      <Text style={styles.sectionTitle}>Revenue Breakdown</Text>
      <Text style={styles.subtitle}>Revenue generated by ticket type</Text>
      <BarChart
        data={revenueBreakdownData}
        title=""
        color={Colors.primary}
        formatValue={formatCurrency}
        maxBars={5}
      />
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    marginBottom: 24,
  },
  sectionTitle: {
    fontSize: 20,
    fontWeight: '700',
    color: Colors.textPrimary,
    marginBottom: 4,
  },
  subtitle: {
    fontSize: 14,
    color: Colors.textSecondary,
    marginBottom: 16,
  },
  emptyState: {
    backgroundColor: Colors.backgroundSecondary,
    borderRadius: 16,
    padding: 32,
    alignItems: 'center',
    borderWidth: 1,
    borderColor: Colors.withOpacity.white10,
  },
  emptyText: {
    fontSize: 14,
    color: Colors.textSecondary,
    textAlign: 'center',
  },
  singleTicketCard: {
    backgroundColor: Colors.backgroundSecondary,
    borderRadius: 16,
    padding: 20,
    borderWidth: 1,
    borderColor: Colors.withOpacity.white10,
  },
  singleTicketHeader: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: 20,
  },
  singleTicketIcon: {
    width: 50,
    height: 50,
    borderRadius: 25,
    backgroundColor: Colors.primary + '20',
    justifyContent: 'center',
    alignItems: 'center',
    marginRight: 16,
  },
  singleTicketEmoji: {
    fontSize: 24,
  },
  singleTicketInfo: {
    flex: 1,
  },
  singleTicketName: {
    fontSize: 18,
    fontWeight: '700',
    color: Colors.textPrimary,
    marginBottom: 4,
  },
  singleTicketPrice: {
    fontSize: 14,
    color: Colors.textSecondary,
  },
  singleTicketStats: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    marginBottom: 20,
  },
  singleTicketStat: {
    flex: 1,
    alignItems: 'center',
  },
  singleTicketStatValue: {
    fontSize: 24,
    fontWeight: '800',
    color: Colors.textPrimary,
    marginBottom: 4,
  },
  singleTicketStatLabel: {
    fontSize: 12,
    color: Colors.textSecondary,
    textAlign: 'center',
  },
  singleTicketProgress: {
    marginTop: 8,
  },
  singleTicketProgressBar: {
    height: 8,
    backgroundColor: Colors.withOpacity.white10,
    borderRadius: 4,
    overflow: 'hidden',
    marginBottom: 8,
  },
  singleTicketProgressFill: {
    height: '100%',
    backgroundColor: Colors.primary,
    borderRadius: 4,
  },
  singleTicketProgressText: {
    fontSize: 12,
    color: Colors.textSecondary,
    textAlign: 'center',
  },
});

export default RevenueBreakdown;
